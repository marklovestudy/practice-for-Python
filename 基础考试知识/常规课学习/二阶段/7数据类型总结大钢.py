'''
1类型
    2_1程序概念层级
    2_2变量与存储
    2_3内置核心数据类型
        2_3_1数值类型
        2_3_2序列
            2_3_2_1可变
                2_3_2_1—list列表：
                    1.可包含任意对象的有序集合
                    2.可通过下标索引访问元素
                    3.可变长度、异质、可任意嵌套
                    4.支持原位改变：
                    5.常用操作：s.sort()从小到大(reverse=False)永久的,sorted(s)临时排序，临时生成列表
                    注：s = [i**2 for i in range(1,11)]
                2_3_2_1-通用操作：
                    1索引访问(取，改，删)：s[i]，s[i:j],s[i:j:k]
                        取：s[i]，s[i:j],s[i:j:k]
                        改：s[i]=’x‘(字符)，s[i:j]=t(列表),s[i:j:k]=t
                        删：del(s[i])，del(s[i:j]),del(s[i:j:k])
                    2追加元素：s.append('x')
                    3扩展序列：s.extend(t)
                    4插入元素：s.insert(i,'x')
                    5检索并删除特定元素：v = s.pop(i),s.remove('x')删除第一个匹配值，s.clear()清空序列
                    6翻转：s.reverse()
                    7复制：s.copy(),l = s,修改l，会同时修改s,l=s.copy()则不会
            2_3_2_2不可变序列
                2_3_2_2--tuple元组
                    1可包含任意对象的有序集合
                    2通过下标索引访问元素
                    3固定长质，异质，可任意嵌套
                    4对象引用数组
                    注：可sorted(s)临时排序，临时生成列表
                2_3_2_2--range范围
                    1包头不包尾
                2_3_2_2--文本序列str字符串
                    1内置方法：str(obj),str.replace(old,new,count),str.capitalize()
                    str.title(),str.upper(),str.lower(),str.startswith('x'),str.endswith('x')
                    str.isnumeric(),str.isalpha(),str.lstrip()str.strip(),str.rstrip()
                    str.split(),str.join(),str.format()
                    注：'{0:10}={1:10}'.format('mark',12.34)，0为第一个，1为第二个，
                    {0:10}左对齐，{1:10}右对齐，{0:<10}左对齐，{0:>10}右对齐
                    '{:f},{:.2f},{:06.2f}'.format(3.14159,3.14159,3.14159)
            2_3_2_3通用操作
                1判断元素是否在序列之内：in,not in.
                2连接序列：list1+list2
                3重复序列元素：list1*n
                4索引访问：s[i]，s[i:j],s[i:j:k]
                5获取序列属性：长度len(s),最小值min(s),最大值max(s),和sum(s)
                6检索某个元素第一次出现的元素下标s.index('x')
                7检索某个元素出现的次数s.count('x')
        2_3_3映射
            2_3_3--dict字典
                内置方法：clear()、get()、items()、keys()、values()、pop()、popitem()
                修改和添加值：d[key]=valuse
        2_3_4文件
        2_3_5集合
        2_3_6其它
'''

'''
编写一个重复执行的程序，要求用户输入一个字符串。如果输入的字符串的长度是奇数，
就输出字符串最中间的字符。如果字符串的长度是偶数，就输出字符串的最后一个字符。然后重复以上操作。
while True:
    str1=input('输入一个字符串:')
    #if len(str1)==0:为空
    if len(str1)%2==0:
        print(str1[-1])
    else:
        print(str1[int(len(str1)/2)])
'''

'''
从键盘输入任意字符串，按照下面要求分离字符串中的字符：
1、分别取出该字符串的第偶数位的元素（提醒注意：是按照从左往右数的方式确定字符串的位置）；
2、并依次存储到一个列表中；
3、输出这个列表。
str1=input('输入一个字符串:')
#if len(str1)==0:为空
list1=list(str1[1::2])
print(list1)
'''

'''
某航空公司对于托运行李有尺寸要求，必须满足以下条件：
每件托运行李的长、宽、高三边之和须大于或等于60厘米，且小于或等于203厘米。（注意只是三边，不考虑立方体的整个周长，相当于只求长+宽+高三个数字的和，如，长宽高为：20、30、40，则之和为90）
编写一个重复执行的程序，要求如下：
1、用户一次性输入三个数字，分别代表行李的长、宽、高（单位：厘米），三个数字直接用英文的逗号隔开；如：23,45,67
2、程序自动将输入的长宽高转化为列表或者元组；
3、程序需要判断用户输入的托运行李尺寸是否满足此航空公司的要求。
4、如果满足要求，就输出"可以托运"。如果不满足要求，就输出"不可以托运"。
5、然后重复以上操作，重复次数不限。
#l,w,h=eval(input())方法：序列解包赋值
ls=list(input('输入三个数字，分别代表行李的长、宽、高（单位：厘米）').split(','))     #把输入内容用,号分割成列表
s=eval('+'.join(ls))        #把列表转换为字符串，'长+宽+高',然后用eval()提取值，也就是求值
if 60<=s<=203:
    print('可以托运')
else:
    print('不可以托运')
'''

'''
统计一段文本中有几句话
编写程序，要求如下：
1.程序开始运行后，需要用户输入一段中文；
2.根据用户的输入，统计其中共有几句话（以句末为“。”“？”或“！”为依据，判断一句话）；
3.输出统计结果，如：“这段话中共有3句话”。
str1=input('输入一段中文:')
n=0
for i in str1:
    if i in ['。','？','！']:
        n+=1
print('这段话中共有%s句话'%n)
'''

'''
学过编程的小程同学想帮助医生对核酸检测人群进行分流和统计，根据健康码的颜色分配不同的核酸检测区域：
红码：A区
橙码：B区
绿码：C区
等待核酸检测人数众多，但是具体检测人数未知，请你帮小程编写一个程序来协助医生对核酸人群进行人群分流并统计人数。要求如下：
1、字母R代表红码，字母Y代表黄码，G代表绿码：
2、程序运行后根据提示信息输入一个健康码（R、Y、G中之一），输入其他字母提示“输入错误请重新输入”；根据不同的健康码，自动返回区域信息：（红码：A区、橙码：B区、绿码：C区）；
3、程序一直在重复运行，但当输入“end”表示检测结束，输出下面信息（见要求4）后程序结束运行；
4、检测结束后输出总人数和对应红码、黄码和绿码的人数。
运行案例如下：
输入样例1：
R
输出样例1：
请到A区检测
输入样例2：
Y
输出样例2：
请到B区检测
输入样例3：
G
输出样例3：
请到C区检测
输入样例4：
end
输出样例4：
检测结束，一共检测*人
红码：*人
黄码：*人
绿码：*人
（说明：*代表实际统计的的数字）
d={}            #创建字典存储数据
while True:
    p_code=input('输入一个健康码（R、Y、G中之一）:')
    if p_code == 'end':
        break
    elif p_code == 'R':
        print('请到A区检测')
        d['红码']=d.get('红码',0)+1     #如果字典中有红码，返回已有人数，如果没有返回0，并创建红码键值对。
    elif p_code == 'Y':
        print('请到B区检测')
        d['黄码']=d.get('黄码',0)+1
    elif p_code == 'G':
        print('请到C区检测')
        d['绿码']=d.get('绿码',0)+1
    else:
        print('输入错误请重新输入')
for k,v in d.items():           #遍历字典键值对
    print('{}:{}人'.format(k,v)) #输出字典数据
'''


'''
实现统计字符串中的单词和单词出现的次数：
要求如下：
（1）统计的语句为：to be or not to be that is a question
（2）要求统计该句中出现的所有单词和其出现次数。
（3）使用字典进行输出，格式如下（注意：排列顺序可以不一致，但是统计的次数要正确）：
{'to': 2, 'be': 2, 'or': 1, 'not': 1, 'is': 1, 'a': 1, 'question': 1, 'that': 1}
str1='to be or not to be that is a question'
list1=str1.split()      #以空格为分割符分割字符得到一个列表
d={}
for i in list1:
    d[i]=d.get(i,0)+1
print(d)
'''


'''
可以对任何一个自然数进行若干次运算，最终都可以变为1。
运算规则如下：
（1）若该数是偶数，则变为原数的一半；
（2）若该数是奇数，则变为原数的3倍加1；
（3）重复（1）（2），直到该数变为1。
编写程序实现如下功能：输入一个大于1的自然数，计算按照上述方法最终变换为1共经过的变换次数，并输出变换次数。（输出格式为：直接输出次数即可）
示例1：若输入自然数8，则输出结果为：3。
示例2：若输入自然数5，则输出结果为：5。
num =eval(input('输入一个大于1的自然数:'))
n=0     #变换次数
re=num  #输入的目标值赋值给re
while re !=1:
    if re%2==0:
        re=re/2
    else:
        re=3*re+1
    n+=1
print("若输入自然数{}，则输出结果为：{}。".format(num,n))

'''