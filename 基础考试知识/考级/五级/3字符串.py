'''

字符串的概念：
    在 Python 中，字符串属于不可变有序序列。使用单引号、双引号、三个单引号或三个双引号
    作为定界符，并且不同的定界符之间可以互相嵌套。
    除了支持序列通用操作（双向索引、比较大小、计算长度、元素访问、切片、成员测试等）以外，
    字符串类型还支持一些特有的用法，例如字符串格式化、查找、替换等，但由于字符串属于不可
    变序列，不能直接对字符串对象进行元素增加、修改与除等操作，切片操作也只能访问其中的元
    素，而无法修改字符串中的字符。

Python 支持短字符串驻留机制，不支持长字符串驻留机制。对于短字符串将其赋值给多个不同的对
       象时，内存中只有一个副本，多个对象共享该副本。然而这一点并不适用于长字符串。
>>> a ='1234'
>>> b ='1234'
>>> id ( a )== id ( b )
 True
>>> a ='1234'*5000
>>> b ='1234'*5000
>>> id ( a )== id ( b )
 False

Python3.x完全支持中文字符，默认使用 UTF -8编码格式，无论是一个数字、英文字母，还是一个
        汉字，都按一个字符处理。在Python3.x中甚至可以使用中文个为变量名、函数名等标识符，
        但不建议这样做。

字符串的转义符：
    转义字符是指在字符串中某些特定的符号前加一个斜杠，之后该字符将被解释为另一种含义，不再
    表示本来的字符。常用的转义符如下：
    \n 换行符；\r 回车；\t 水平制表符； \v 垂直制表符； \\一个斜杠；\'单引号；\”双引号；

    \ooo 3位八进制对应的字符；
    \xhh 2位十六进制对应的字符；
    \uhhhh 4位十六进制对应的 Unicode 字符

>>> '\102'      3位八进制对应的字符；
'B'
>>> '\x48'      2位十六进制对应的字符；
'H'
'\u4eba\u751f\u82e6\u77ed'
'人生苦短'

字符串的格式化
%s采用str()显示的字符串
%c单个字符
%b二进制整数
%o八进制整数
%d十进制整数
%x十六进制整数
%f浮点数

>>> a=123
>>> s = '%o'%a      #占位符取八进制整数，十进制123对应八进制的173
>>> s
'173'
>>> oct(123)
'0o173'

>>> s = '%x'%a       #占位符取十六进制整数，十进制123对应十六进制的7b
>>> s
'7b'
>>> hex(123)
'0x7b'

>>> s = '%s'%a      #传进去后成了字符串
>>> s
'123'

str()函数可以把任意类型转换成字符串。
>>> str([1,2,3])
'[1, 2, 3]'

字符串的格式化：
字符串格式化。format()略

字符串的常用操作：
 find ()、 rfind ()
 find (）和 rfind (）方法分别用来查找一个字符串在另一个字符串指定范围中首次和最后
 一次出现的位置，如果不存在，则返回﹣1。
>>> s =' nihao !'
>>> s . find (' hao ')
2
>>> s . rfind (' a ')
3
字符串的常用操作：
 lower ()、 upper ()、 capitalize()、 title()
它们分别用来将字符串转化为小写乐写字母，将字符首字母变为大写，每个单词的首字母变为大写。
新生成的字符串不对原字符串做任何修改。

 strip ()、 rstrip ()、 Istrip ()
它们分别用来删除两端、右端、左端连续的空白字符或指定字符。
>>> s= '  abc  '
>>> s.strip()
'abc'
>>> s.rstrip()
'  abc'
>>> s.lstrip()
>>> s.strip('bc  ')
'a'
'abc  '
>>> s
'  abc  '
>>> s='abc'
>>> s.strip('c')
'ab'
>>> s
'abc'

'''