'''
列表的概念：
类型名称：list
定界符:[]
可变行：可变
有序性：有序
对元素类型与值的要求：无
元素是否重复：可以
元素查找速度：非常慢
增删元素速度：尾部快，其它位置慢

列表的概念
    列表是包含若干元素的有序连续内存空间，当列表增加或删除元素时，列表对象自动进行内存的扩展
    或收缩，从而保证相邻元素之间没有缝隙。列表的这个内存自动管理功能可以大幅减少程序员的工作，
    但插入和删除非尾部元素时涉及列表中大量元素的移动，严重影响效率。另外在非尾部位置插入和删
    除元素时，会改变该位置后面的元素在列表中的索引，这对于某些操作可能会导致意外的错误结果，
    因此除非确实有必要，否则应尽列表尾部进行元素的追加与删除操作。

    在 Python 中，同一个列表中元素的数据类型可以各不相同，可以同时包含整数、实数、字符串等
    基本类型的元素，也可以包含列表、元组、字典、集合、函数以及其他任意对象。

列表的创建：
    在 Python 中，使用“=”直接将一个列表赋值给变量，即可创建列表对象。
    也可以使用 list (）函数把元组、 range 对象、字符串、字典、集合或其他可迭代对象转化为列表。
    需要注意的是，把字典转换为列表时，默认是将字典的键转换为列表，而不是把字典的元素转换为列表，
    如果想把字典的元素转换为列表，需要使用字典对象的 items (）方法明确说明，当然也可以使用
    values (）来明确说要把字典的值转换为列表。

>>> list((1,2,3))       #元组转成列表
[1, 2, 3]
>>> list(range(3))      #range转成列表
[0, 1, 2]
>>> list('mark')        #str转成列表
['m', 'a', 'r', 'k']
>>> list({1,2,3})       #集合转成列表
[1, 2, 3]
>>> list({'a':1,'b':2,'c':3})           #字典转列表
['a', 'b', 'c']
>>> list({'a':1,'b':2,'c':3}.items())
[('a', 1), ('b', 2), ('c', 3)]
>>> list({'a':1,'b':2,'c':3}.values())
[1, 2, 3]
>>> list({'a':1,'b':2,'c':3}.keys())
['a', 'b', 'c']

列表的删除：
    当一个列表不再使用时，可以使用 del 命令将其删除，这一点适用于所有类型的 Python 对象。
    本质上 del 命令并不删除变量对应的值，只是删除变量，并解除变量和值的绑定。

    **垃圾回收机制： Python 内部每个值配备一个计数器，每当有新的变量引用该值是，其计数器加1，
    当该变量被删除或不再引用该值时，其计数器减1。当某个值的计数器变为0时，则由垃圾回收器
    负责清理和删除。

map ()、 zip (）对列表的操作：
    map ()函数把函数映射到列表上的每个元素。 zip ()函数用于将多个列表中元素重新组合为元组，
    并返回包含这些元组的 zip 对象。>>> x =[23,4]
x = [2,3,4]
>>> list ( map ( lambda i:i +5, x ))     #所有元素同时加5
[7,8,9]

>>> v = list(zip(['a','b','c'],[1,2]))      #列表不等长，以短为准
>>> v
[('a', 1), ('b', 2)]

>>> list(zip(range(3)))                 #仅对一个序列操作
[(0,), (1,), (2,)]

列表推导式：
    列表推导式也称为列表解析式，可以使用非常简洁的方式对列表或其他可迭代对象的元素进行遍历、
    过滤或再次计算，快速生成满足特定需求的新列表，代码简洁，具有很强的可读性，是推荐使用的
    一种技术。

    列表推导式在逻辑上等价于一个循环语句，只是形式上更加简洁。

>>> lis = [i*i for i in range(6)]
>>> lis
[0, 1, 4, 9, 16, 25]
等价于下面方法：
>>> s = []
>>> for i in range(3):
	s.append(i*i)
>>> s
[0, 1, 4]

    本例也可以利用 Python 函数式编程的特点，使用 map (）实现同样的功能。
>>> lis = list ( map ( lambda i:i*i , range (3)))
>>> lis
[0,1,4]

'''

l = list(zip([1,2,3],['x','y']))
print(l)
