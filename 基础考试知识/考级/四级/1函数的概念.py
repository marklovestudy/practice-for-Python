'''
函数的概念：
    函数的意义：
    在写一段程序的时候，需要多次用到同样的功能，如果每次都要重复写相同的代码，不仅会增加代码量，
    而且阅读与修改极不方便。如果把实现相同功能的代码作为一个代码块封装在一起，形成一个函数，每
    次仅需要时调用这个函数，就很方便了！

def user():                 #函数名，以冒号结尾，括号内可有参数。
    print('hello world')    #函数体，用来完成的功能代码
user()                      #使用函数名()的方式调用

向函数传递参数信息
def user(name):                 #函数名，以冒号结尾，括号内可有参数。
    print('hello world',name)    #函数体，用来完成的功能代码
user('mark')

形参和实参
    从名字就可以看出，实参是是一个实实在在存在的参数，是实际占用内存地址的，而形参只是意义上的一种参数，
    在定义的时候是不占内存的，如在上面例子中，name就是一个形参，'mark'是在调用函数时传入的一个实参，
    它的值被存储在形参name中。

1位置实参
    在调用函数的时候，必须将每个实参都关联到函数定义中的每一个形参，最简单的关联方式就是基于实参的顺序。

def f(x,y,z):               #首先在定义函数的时候传入3个形参x,y,z
    print(x,y,z)
f(3,2,1)                    #在调用该函数时，通过位置实参的方式，将实参映射到形参，一一对应，即
                             x = 3,y = 2,z = 1
运行结果：
3  2  1
    需要注意的是，如果使用位置实参的方式传值，传入的实参个数必须与形参相同，否则运行程序会报错。

2关键字实参
    关键字实参是通过关键字-值的方式，关键字实参的方式就不需要考虑函数调用过程中实参的顺序。同一个参
    数不能传两个值

def f(x,y,z):
    print(x,y,z)
f(x=1,y=2,z=3)      #通过关键字=值的方式，将实参与形参关联映射，不需要考虑形参的顺序，顺序也可以改变，
                    即y=2,z=3,x=1,运形结果不会发生改变。
输出结果为：
1 2 3

3.即有顺序，又有关键字
def f(x,y,z):
    print(x,y,z)
f(1,y=2,z=3)        #在两种方式滥用的时候，顺序实参必须要放在关键字实参之前，否则会报错

4.默认值
    1在定义函数的时候，也可以指定形参的默认值，如果在调用函数时给函数提供了实参时，python将使用
    指定的实参值，否则将自动调用形参默认值。因此，如果给形参指定默认值后，在调用时可以不用给它传值，使用默认值
    可以简化函数的调用。如：
def f(x,y=2):           #定义函数的时候在这里给形参设置了默认值y=2
    print(x,y)
f(1)                    #在调用此函数时，只传入了一个实参，y的值就会使用默认值
运行结果：
1 2

    2还可以在调用的时候，更改默认值，如
def f(x,y=2):           #定义函数的时候在这里给形参设置了默认值y=2
    print(x,y)
f(1，3)                    #在调用此函数时，将y的默认值更改成新的实参值。
运行结果：
1 3

    3在使用形参默认值的时候需要注意：在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。
    这让python依然能够正确的解读位置实参。
def f(x=2,y):           #此处错误，有默认值的形参要放在后面
    print(x,y)
f(1)                    #运形时报错。
    即：在函数调用过程中，可以混合使用位置实参，关键字和默认值参数，但是其中相关的规则一定要遵循，否则
    一宁会导致程序的运行出错。
    当提供的实参多于或少于函数定义时所提供的形参时，程序会报错。

5列表和字典
    当不确定需要传入的值是多少时，在定义形参的时候，可以使用*args(列表)，**kwargs(字典)来表示。
def f(*args,**kwargs):          #使用*args代表列表。**kwargs代表字典，这种形式可以在调用
                                 函数的时候传入多个实参
    print(args)
    print(kwargs)
f(*[1,2,3,4,5],**{'y':1})       #如果想要传入的值以列表或字典的形式显示出来，就需要在元素前加上*或**
运行结果：
(1,2,3,4,5)
{'y':1}

**函数的定义必须在主程序调用语句之前出现
'''


def f(*args, **kwargs):
    print(args)
    print(kwargs)
f((1,2,3), **{'y': 1})

